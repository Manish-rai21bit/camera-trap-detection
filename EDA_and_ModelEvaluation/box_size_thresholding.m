% Auto-generated by MATLAB on 2019/08/31 12:09:42
clc; clear;
%% Initialize variables.
filename = '/Users/manishrai/Downloads/BoxSizevsAccuracy_zebra.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
BoxSizevsAccuracy = table;
BoxSizevsAccuracy.Bin = cell2mat(raw(:, 1));
BoxSizevsAccuracy.AR0 = cell2mat(raw(:, 2));
BoxSizevsAccuracy.AR1 = cell2mat(raw(:, 3));
BoxSizevsAccuracy.AR2 = cell2mat(raw(:, 4));
BoxSizevsAccuracy.AR3 = cell2mat(raw(:, 5));

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp R;
%%
BoxSizevsAccuracy.BinNormalized = BoxSizevsAccuracy.Bin/756900;
BoxSizevsAccuracy = rmmissing(BoxSizevsAccuracy);

figure(1);
f1=fit(BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR0,'power2')
plot(f1,BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR0);
xlabel('Area of Boxes');
ylabel('Average Recall @ IoU 05:0.95');
ylim([0, 1]);
grid on;

figure(2);
f2=fit(BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR1,'power2')
plot(f2,BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR1);
xlabel('Area of Boxes');
ylabel('Average Recall @ IoU 05:0.95');
ylim([0, 1]);
grid on;

figure(3);
f3=fit(BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR2,'power2')
plot(f3,BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR2);
xlabel('Area of Boxes');
ylabel('Average Recall @ IoU 05:0.95');
ylim([0, 1]);
grid on;

figure(4);
f4=fit(BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR3,'power2')
plot(f4,BoxSizevsAccuracy.BinNormalized,BoxSizevsAccuracy.AR3);
xlabel('Area of Boxes');
ylabel('Average Recall @ IoU 05:0.95');
ylim([0, 1]);
grid on;

%% Derivatives
x = [10:10:870].^2;
x_norm = x./756900;

slopes1 = [x; x_norm; get_value_of_power2(f1, x_norm)'; get_slope_of_power2(f1, x_norm)];
slopes2 = [x; x_norm; get_value_of_power2(f2, x_norm)'; get_slope_of_power2(f2, x_norm)];
slopes3 = [x; x_norm; get_value_of_power2(f3, x_norm)'; get_slope_of_power2(f3, x_norm)];
slopes4 = [x; x_norm; get_value_of_power2(f4, x_norm)'; get_slope_of_power2(f4, x_norm)];

function slope = get_slope_of_power2(f, x_norm)
    % This function can take vector as x. 
    a = f.a;
    b = f.b;
    c = f.c;
    slope = a*b.*(x_norm.^(b-1));
end

function value = get_value_of_power2(f, x_norm)
    % This function can take vector as x. 
    value = f(x_norm);
end
